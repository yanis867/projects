import javax.swing.*;
import javax.swing.table.*;
import java.awt.*;
import java.sql.*;

public class DataTableUI extends JFrame {
    private DefaultTableModel tableModel; 
    private boolean addedToday = false;
    private int todayRowIndex = -1;

    public DataTableUI(int userId) {
        setTitle("Médilog - Data Table");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); 
        setSize(942, 627); // Window size 
        setLocationRelativeTo(null); // Center the window 
        setResizable(false);
        getContentPane().setLayout(null);  

        // Set Background
        JLabel background = new JLabel(new ImageIcon(getClass().getResource("/Backgroundimg2.png")));
        background.setBounds(0, 0, 942, 627); // Background size
        getContentPane().add(background);

        // Add Logo
        JLabel logo = new JLabel(new ImageIcon(new ImageIcon(getClass().getResource("/logo2.png"))
                .getImage()
                .getScaledInstance(170, 58, Image.SCALE_SMOOTH))); // Logo size
        logo.setBounds(20, 10, 170, 58); // Logo position
        background.add(logo);

        // Create Table
        String[] columns = {"Day", "Weight (KG)", "Temperature (°C)", "Heart Rate (bpm)"};
        tableModel = new DefaultTableModel(columns, 0);
        JTable table = new JTable(tableModel);

        // Customize Table
        table.setRowHeight(30); 
        table.setFont(new Font("Arial", Font.PLAIN, 14));
        table.setForeground(Color.BLACK);
        table.setBackground(Color.WHITE);
        table.setGridColor(Color.LIGHT_GRAY);

        // Disable Column Reordering
        table.getTableHeader().setReorderingAllowed(false);

        // Customize Table Header
        JTableHeader header = table.getTableHeader();
        header.setFont(new Font("Arial", Font.BOLD, 14));
        header.setBackground(Color.decode("#69b031"));
        header.setForeground(Color.WHITE);

        // Add Table with Header to a Scroll Pane
        JScrollPane scrollPane = new JScrollPane(table);
        scrollPane.setBounds(170, 190, 600, 210);
        background.add(scrollPane);

        // Load Data from Database
        loadDataFromDatabase(userId);

        // Add Buttons
        JButton addDoctorBtn = new JButton("ADD DOCTOR");
        getContentPane().add(addDoctorBtn);
        addDoctorBtn.setBounds(20, 60, 140, 35);
        addDoctorBtn.setFont(new Font("Arial", Font.BOLD, 14));
        addDoctorBtn.setBackground(Color.decode("#69b031"));
        addDoctorBtn.setForeground(Color.WHITE);

        // Add action listener for "Add Doctor" button
        addDoctorBtn.addActionListener(e -> addDoctor(userId));

        JButton addInfoBtn = new JButton("ADD TODAY'S INFO"); 
        getContentPane().add(addInfoBtn);
        addInfoBtn.setBounds(192, 60, 180, 35);
        addInfoBtn.setFont(new Font("Arial", Font.BOLD, 14));
        addInfoBtn.setBackground(Color.decode("#69b031"));
        addInfoBtn.setForeground(Color.WHITE);
        
        JButton dataTableBtn = new JButton("DATA TABLE");
        getContentPane().add(dataTableBtn);
        dataTableBtn.setBounds(394, 60, 180, 35);
        dataTableBtn.setFont(new Font("Arial", Font.BOLD, 14));
        dataTableBtn.setBackground(Color.LIGHT_GRAY);
        dataTableBtn.setForeground(Color.BLACK);
                
        JButton dataGraphBtn = new JButton("DATA GRAPH");
        getContentPane().add(dataGraphBtn);
        dataGraphBtn.setBounds(583, 60, 180, 35);
        dataGraphBtn.setFont(new Font("Arial", Font.BOLD, 14));
        dataGraphBtn.setBackground(Color.decode("#69b031"));
        dataGraphBtn.setForeground(Color.WHITE);
        JButton notificationsBtn = new JButton("NOTIFICATIONS");
        getContentPane().add(notificationsBtn);
        notificationsBtn.setBounds(773, 60, 143, 35);
        notificationsBtn.setFont(new Font("Arial", Font.BOLD, 14));
        notificationsBtn.setBackground(Color.decode("#008CBA"));
        notificationsBtn.setForeground(Color.WHITE);
                        
        // Add Action to Notifications Button
        notificationsBtn.addActionListener(e -> showNotifications(userId));
                        
        // Add Action to Data Graph Button
        dataGraphBtn.addActionListener(e -> {
            SwingUtilities.invokeLater(() -> new DataGraphWindow(tableModel).setVisible(true));
        });
                
        // Updated addInfoBtn ActionListener
        addInfoBtn.addActionListener(e -> {
            if (addedToday) {
                int choice = JOptionPane.showOptionDialog(
                    this,
                    "You have already added today's info. What would you like to do?",
                    "Today's Info Exists",
                    JOptionPane.YES_NO_CANCEL_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    new String[]{"Overwrite", "Delete", "Cancel"},
                    "Cancel"
                );
                
                switch (choice) {
                    case 0: // Overwrite
                        overwriteTodaysInfo(userId);
                        break;
                    case 1: // Delete
                        deleteTodaysInfo(userId);
                        break;
                    case 2: // Cancel
                    default:
                        // Do nothing
                        break;
                }
            } else {
                addTodaysInfo(userId);
            }
        });
    }

    private void addDoctor(int userId) {
        String url = "jdbc:mysql://localhost:3306/medilog";
        String user = "root";
        String password = "";

        // Step 1: Fetch all doctors from the database
        String query = "SELECT ID_Prof, Prof_FullName, Prof_Gender FROM healthprof";
        DefaultTableModel doctorModel = new DefaultTableModel(new String[]{"Name", "Gender"}, 0);
        JTable doctorTable = new JTable(doctorModel);

        try (Connection conn = DriverManager.getConnection(url, user, password);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {

            while (rs.next()) {
                String name = rs.getString("Prof_FullName");
                String gender = rs.getString("Prof_Gender");
                doctorModel.addRow(new Object[]{name, gender});
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this,
                "Error loading doctors: " + e.getMessage(),
                "Database Error",
                JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Step 2: Display doctors in a dialog
        JScrollPane scrollPane = new JScrollPane(doctorTable);
        scrollPane.setPreferredSize(new Dimension(400, 200));
        int result = JOptionPane.showConfirmDialog(this, scrollPane, "Choose a Doctor", JOptionPane.OK_CANCEL_OPTION);

        if (result == JOptionPane.OK_OPTION) {
            int selectedRow = doctorTable.getSelectedRow();
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(this, "Please select a doctor.", "No Selection", JOptionPane.WARNING_MESSAGE);
                return;
            }

            String selectedDoctorName = doctorModel.getValueAt(selectedRow, 0).toString();
            int selectedDoctorId = -1;

            // Fetch the selected doctor's ID
            String doctorQuery = "SELECT ID_Prof FROM healthprof WHERE Prof_FullName = ?";
            try (Connection conn = DriverManager.getConnection(url, user, password);
                 PreparedStatement stmt = conn.prepareStatement(doctorQuery)) {

                stmt.setString(1, selectedDoctorName);
                try (ResultSet rs = stmt.executeQuery()) {
                    if (rs.next()) {
                        selectedDoctorId = rs.getInt("ID_Prof");
                    }
                }

            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this,
                    "Error fetching selected doctor ID: " + e.getMessage(),
                    "Database Error",
                    JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Step 3: Check if the user already has a doctor
            String checkUserQuery = "SELECT ID_Prof FROM user WHERE ID_User = ?";
            int currentDoctorId = -1;

            try (Connection conn = DriverManager.getConnection(url, user, password);
                 PreparedStatement stmt = conn.prepareStatement(checkUserQuery)) {

                stmt.setInt(1, userId);
                try (ResultSet rs = stmt.executeQuery()) {
                    if (rs.next()) {
                        currentDoctorId = rs.getInt("ID_Prof");
                    }
                }

            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this,
                    "Error checking user doctor: " + e.getMessage(),
                    "Database Error",
                    JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Step 4: Confirm doctor change
            if (currentDoctorId != 0) {
                int changeDoctor = JOptionPane.showConfirmDialog(this,
                    "You already follow a doctor. Do you want to change?",
                    "Doctor Change Confirmation",
                    JOptionPane.YES_NO_OPTION);

                if (changeDoctor != JOptionPane.YES_OPTION) {
                    return;
                }
            }

            // Step 5: Update the user's doctor
            String updateUserQuery = "UPDATE user SET ID_Prof = ? WHERE ID_User = ?";
            try (Connection conn = DriverManager.getConnection(url, user, password);
                 PreparedStatement stmt = conn.prepareStatement(updateUserQuery)) {

                stmt.setInt(1, selectedDoctorId);
                stmt.setInt(2, userId);
                stmt.executeUpdate();
